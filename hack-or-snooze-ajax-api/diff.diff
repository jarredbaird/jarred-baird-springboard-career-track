--- ui.js	2020-11-19 13:34:26.889811714 -0500
+++ ui_SOLUTION.js	2020-11-19 13:30:30.887267578 -0500
@@ -1,13 +1,19 @@
 $(async function () {
   // cache some selectors we'll be using quite a bit
+  const $body = $("body");
   const $allStoriesList = $("#all-stories-list-list");
   const $submitForm = $("#submit-form");
+  const $favoritedStories = $("#my-favorite-stories");
   const $filteredArticles = $("#filtered-articles");
   const $loginForm = $("#login-form");
   const $createAccountForm = $("#create-account-form");
   const $myCreatedStories = $("#my-created-stories");
   const $navLogin = $("#nav-login");
+  const $navWelcome = $("#nav-welcome");
+  const $navUserProfile = $("#nav-user-profile");
   const $navLogOut = $("#nav-logout");
+  const $navSubmit = $("#nav-submit");
+  const $userProfile = $("#user-profile");
 
   // global storyList variable
   let storyList = null;
@@ -47,11 +53,11 @@
     evt.preventDefault(); // no page refresh
 
     // grab the required fields
-    let name = $("#create-account-name").val();
-    let username = $("#create-account-username").val();
-    let password = $("#create-account-password").val();
+    const name = $("#create-account-name").val();
+    const username = $("#create-account-username").val();
+    const password = $("#create-account-password").val();
 
-    // call the create method, which calls the API and then builds a new user instance
+    // call create method, which calls  API and then builds a new user instance
     const newUser = await User.create(username, password, name);
 
     currentUser = newUser;
@@ -71,6 +77,74 @@
   });
 
   /**
+   * Submit article event handler.
+   *
+   * */
+
+  $submitForm.on("submit", async function (evt) {
+    evt.preventDefault(); // no page refresh
+
+    // grab all the info from the form
+    const title = $("#title").val();
+    const url = $("#url").val();
+    const hostName = getHostName(url);
+    const author = $("#author").val();
+    const username = currentUser.username;
+
+    const storyObject = await storyList.addStory(currentUser, {
+      title,
+      author,
+      url,
+      username,
+    });
+
+    // generate markup for the new story
+    const $li = $(`
+      <li id="${storyObject.storyId}" class="id-${storyObject.storyId}">
+        <span class="star">
+          <i class="far fa-star"></i>
+        </span>
+        <a class="article-link" href="${url}" target="a_blank">
+          <strong>${title}</strong>
+        </a>
+        <small class="article-hostname ${hostName}">(${hostName})</small>
+        <small class="article-author">by ${author}</small>
+        <small class="article-username">posted by ${username}</small>
+      </li>
+    `);
+    $allStoriesList.prepend($li);
+
+    // hide the form and reset it
+    $submitForm.slideUp("slow");
+    $submitForm.trigger("reset");
+  });
+
+  /**
+   * Starring favorites event handler
+   *
+   */
+
+  $(".articles-container").on("click", ".star", async function (evt) {
+    if (currentUser) {
+      const $tgt = $(evt.target);
+      const $closestLi = $tgt.closest("li");
+      const storyId = $closestLi.attr("id");
+
+      // if the item is already favorited
+      if ($tgt.hasClass("fas")) {
+        // remove the favorite from the user's list
+        await currentUser.removeFavorite(storyId);
+        // then change the class to be an empty star
+        $tgt.closest("i").toggleClass("fas far");
+      } else {
+        // the item is un-favorited
+        await currentUser.addFavorite(storyId);
+        $tgt.closest("i").toggleClass("fas far");
+      }
+    }
+  });
+
+  /**
    * Event Handler for Clicking Login
    */
 
@@ -82,16 +156,86 @@
   });
 
   /**
+   * Event Handler for On Your Profile
+   */
+
+  $navUserProfile.on("click", function () {
+    // hide everything
+    hideElements();
+    // except the user profile
+    $userProfile.show();
+  });
+
+  /**
+   * Event Handler for Navigation Submit
+   */
+
+  $navSubmit.on("click", function () {
+    if (currentUser) {
+      hideElements();
+      $allStoriesList.show();
+      $submitForm.slideToggle();
+    }
+  });
+
+  /**
+   * Event handler for Navigation to Favorites
+   */
+
+  $body.on("click", "#nav-favorites", function () {
+    hideElements();
+    if (currentUser) {
+      generateFaves();
+      $favoritedStories.show();
+    }
+  });
+
+  /**
    * Event handler for Navigation to Homepage
    */
 
-  $("body").on("click", "#nav-all", async function () {
+  $body.on("click", "#nav-all", async function () {
     hideElements();
     await generateStories();
     $allStoriesList.show();
   });
 
   /**
+   * Event handler for Navigation to My Stories
+   */
+
+  $body.on("click", "#nav-my-stories", function () {
+    hideElements();
+    if (currentUser) {
+      $userProfile.hide();
+      generateMyStories();
+      $myCreatedStories.show();
+    }
+  });
+
+  /**
+   * Event Handler for Deleting a Single Story
+   */
+
+  $myCreatedStories.on("click", ".trash-can", async function (evt) {
+    // get the Story's ID
+    const $closestLi = $(evt.target).closest("li");
+    const storyId = $closestLi.attr("id");
+
+    // remove the story from the API
+    await storyList.removeStory(currentUser, storyId);
+
+    // re-generate the story list
+    await generateStories();
+
+    // hide everyhing
+    hideElements();
+
+    // ...except the story list
+    $allStoriesList.show();
+  });
+
+  /**
    * On page load, checks local storage to see if the user is already logged in.
    * Renders page information accordingly.
    */
@@ -108,6 +252,7 @@
     await generateStories();
 
     if (currentUser) {
+      generateProfile();
       showNavForLoggedInUser();
     }
   }
@@ -130,6 +275,26 @@
 
     // update the navigation bar
     showNavForLoggedInUser();
+
+    // get a user profile
+    generateProfile();
+  }
+
+  /**
+   * Build a user profile based on the global "user" instance
+   */
+
+  function generateProfile() {
+    // show your name
+    $("#profile-name").text(`Name: ${currentUser.name}`);
+    // show your username
+    $("#profile-username").text(`Username: ${currentUser.username}`);
+    // format and display the account creation date
+    $("#profile-account-date").text(
+      `Account Created: ${currentUser.createdAt.slice(0, 10)}`
+    );
+    // set the navigation to list the username
+    $navUserProfile.text(`${currentUser.username}`);
   }
 
   /**
@@ -153,18 +318,32 @@
   }
 
   /**
-   * A function to render HTML for an individual Story instance
+   * A render method to render HTML for an individual Story instance
+   * - story: an instance of Story
+   * - isOwnStory: was the story posted by the current user
    */
 
-  function generateStoryHTML(story) {
+  function generateStoryHTML(story, isOwnStory) {
     let hostName = getHostName(story.url);
+    let starType = isFavorite(story) ? "fas" : "far";
+
+    // render a trash can for deleting your own story
+    const trashCanIcon = isOwnStory
+      ? `<span class="trash-can">
+          <i class="fas fa-trash-alt"></i>
+        </span>`
+      : "";
 
-    // render story markup
+    // render all the rest of the story markup
     const storyMarkup = $(`
       <li id="${story.storyId}">
+        ${trashCanIcon}
+        <span class="star">
+          <i class="${starType} fa-star"></i>
+        </span>
         <a class="article-link" href="${story.url}" target="a_blank">
           <strong>${story.title}</strong>
-        </a>
+          </a>
         <small class="article-author">by ${story.author}</small>
         <small class="article-hostname ${hostName}">(${hostName})</small>
         <small class="article-username">posted by ${story.username}</small>
@@ -174,6 +353,45 @@
     return storyMarkup;
   }
 
+  /**
+   * A rendering function to build the favorites list
+   */
+
+  function generateFaves() {
+    // empty out the list by default
+    $favoritedStories.empty();
+
+    // if the user has no favorites
+    if (currentUser.favorites.length === 0) {
+      $favoritedStories.append("<h5>No favorites added!</h5>");
+    } else {
+      // for all of the user's favorites
+      for (let story of currentUser.favorites) {
+        // render each story in the list
+        let favoriteHTML = generateStoryHTML(story, false, true);
+        $favoritedStories.append(favoriteHTML);
+      }
+    }
+  }
+
+  function generateMyStories() {
+    $myCreatedStories.empty();
+
+    // if the user has no stories that they have posted
+    if (currentUser.myCreatedStories.length === 0) {
+      $myCreatedStories.append("<h5>No stories added by user yet!</h5>");
+    } else {
+      // for all of the user's posted stories
+      for (let story of currentUser.myCreatedStories) {
+        // render each story in the list
+        let ownStoryHTML = generateStoryHTML(story, true);
+        $myCreatedStories.append(ownStoryHTML);
+      }
+    }
+
+    $myCreatedStories.show();
+  }
+
   /* hide all elements in elementsArr */
 
   function hideElements() {
@@ -182,17 +400,33 @@
       $allStoriesList,
       $filteredArticles,
       $myCreatedStories,
+      $userProfile,
+      $favoritedStories,
       $loginForm,
       $createAccountForm,
+      $userProfile,
     ];
     elementsArr.forEach(($elem) => $elem.hide());
   }
 
   function showNavForLoggedInUser() {
     $navLogin.hide();
+    $userProfile.hide();
+    $(".main-nav-links, #user-profile").toggleClass("hidden");
+    $navWelcome.show();
     $navLogOut.show();
   }
 
+  /* see if a specific story is in the user's list of favorites */
+
+  function isFavorite(story) {
+    let favStoryIds = new Set();
+    if (currentUser) {
+      favStoryIds = new Set(currentUser.favorites.map((obj) => obj.storyId));
+    }
+    return favStoryIds.has(story.storyId);
+  }
+
   /* simple function to pull the hostname from a URL */
 
   function getHostName(url) {
